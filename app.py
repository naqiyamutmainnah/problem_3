# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SvWASEyTRLlSGlBV3DJmdgCXHX7z3hCP
"""

import streamlit as st
import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt

class Generator(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.fc = torch.nn.Sequential(
            torch.nn.Linear(10 + 100, 256),
            torch.nn.ReLU(),
            torch.nn.Linear(256, 512),
            torch.nn.ReLU(),
            torch.nn.Linear(512, 784),
            torch.nn.Tanh()
        )

    def forward(self, noise, labels):
        label_onehot = F.one_hot(labels, num_classes=10).float()
        x = torch.cat([noise, label_onehot], dim=1)
        out = self.fc(x)
        return out.view(-1, 1, 28, 28)

@st.cache_resource
def load_model():
    model = Generator()
    model.load_state_dict(torch.load("digit_generator.pth", map_location='cpu'))
    model.eval()
    return model

def generate_images(digit, model):
    noise = torch.randn(5, 100)
    labels = torch.tensor([digit] * 5)
    with torch.no_grad():
        images = model(noise, labels).squeeze()
    return images

st.title("ðŸ§  Handwritten Digit Generator")

digit = st.selectbox("Select a digit to generate (0â€“9)", list(range(10)))
if st.button("Generate"):
    model = load_model()
    imgs = generate_images(digit, model)

    fig, axs = plt.subplots(1, 5, figsize=(10, 2))
    for i, img in enumerate(imgs):
        axs[i].imshow(img, cmap='gray')
        axs[i].axis('off')
    st.pyplot(fig)